#!/usr/bin/python

"""
psfmerge.py:

contains functions that will merge 2 psf files into one
"""

import re
import os
import sys

class Atom():
  def __init__(self, line):
    self.atomid = int(line[:8].strip())
    self.segname = line[9:13].strip()
    self.resid = line[14:18].strip()
    self.resname = line[19:23].strip()
    self.atomname = line[24:28].strip()
    self.atomtype = line[29:35].strip()
    self.charge = line[35:48]
    self.mass = line[51:58].strip()
    self.unused = line[59:].strip()

  def write(self):
    line = "\n{0:>8} {1:>4} {2:<4} {3:<4} {4:<4} {5:<5} {6:}   {7:<7}         \
        {8:}".format(self.atomid, self.segname, self.resid, self.resname, 
                     self.atomname, self.atomtype, self.charge, self.mass, 
                    self.unused)
    return line

class PSF():
  def __init__(self, atomlist, bondlist, anglelist, dihedrallist, improperlist,
               nblist, donorlist, acclist, ctrlist):
    self.atomlist = atomlist
    self.bondlist = bondlist
    self.anglelist = anglelist
    self.dihedrallist = dihedrallist
    self.improperlist = improperlist
    self.nblist = nblist
    self.donorlist = donorlist
    self.acclist = acclist
    self.ctrlist = ctrlist
    
  def write(self, outfilename):
    outfile = open(outfilename, "w")
    outfile.write("""PSF CMAP CHEQ

       3 !NTITLE
* GENERATED BY psfmerge.py IN THE SEEKR SUITE                                   
* ASSEMBLE PREVIOUSLY GENERATED COMPONENTS (LIPID BILAYER, PROTEIN, PORE WATER, 
*  DATE:    04/04/14     19: 8:29      CREATED BY USER: nobody                  

   %5d !NATOM""" % len(self.atomlist))
    for atom in self.atomlist:
      outfile.write(atom.write())
    outfile.write("\n")
    write_psf_section(self.bondlist, outfile, "BOND", 8)
    write_psf_section(self.anglelist, outfile, "THETA", 9)
    write_psf_section(self.dihedrallist, outfile, "PHI", 8)
    write_psf_section(self.improperlist, outfile, "IMPHI", 8)
    write_psf_section(self.donorlist, outfile, "DON", 8)
    write_psf_section(self.acclist, outfile, "ACC", 8)
    write_psf_section(self.nblist, outfile, "NB", 8)
    write_psf_section(self.ctrlist, outfile, "CRTERM", 8)
    outfile.write("\n\n")
    
    outfile.close()

def write_psf_section(psflist, outfile, section_name, num_columns):
  """ writes any section of a psf file """
  counter = 0
  outfile.write("\n   %5d !N%s: %s\n" % (len(psflist),section_name, 
                                         section_name))
  # thing = bond, angle, dihedral, etc... 
  for i in range(len(psflist)): 
    thing = psflist[i]
    for atomid in thing:
      outfile.write("{0:>8}".format(atomid))
      if counter == num_columns - 1: 
        if i != len(psflist)-1: 
          outfile.write("\n")
        counter = 0
      else:
        counter += 1
        
  outfile.write("\n")
  return

def renumber_psflist(oldlist, fixdict):
  """ Takes an old psf list, and updates each value according to the 
  fixdict dictionary
  """
  newlist = []
  counter = 0
  for old in oldlist:
    littlelist = []
    for atomid in old:
      assert atomid in fixdict.keys(), "Alert! atom id found in PSF section \
          that doesn't exist within 'ATOM' section: {0}".format(atomid)
      littlelist.append(fixdict[atomid])
    #newlist.append(littlelist)
    # change the object in-place
    oldlist[counter] = littlelist 
    counter += 1
  #oldlist = newlist
      
      
def merge_psf_files(psf1_filename, psf2_filename, insert_index=-1):
  """
  given two PSF files, will merge them into a single file, exactly how 
  SEEKR merges two PDB files
  """
  psf1_file = open(psf1_filename, "r")
  psf2_file = open(psf2_filename, "r")
  psf1 = parse_psf(psf1_file)
  psf2 = parse_psf(psf2_file)
  
  if insert_index == -1:
    # find the final atom's index
    insert_index = psf1.atomlist[-1].atomid   
  num_psf2_atoms = psf2.atomlist[-1].atomid

  
  # run thru psf2 atoms, generate dictionary of new atom ids
  psf2_new = {0:0}
  for atom in psf2.atomlist:
    # add to the dictionary
    psf2_new[atom.atomid] = atom.atomid + insert_index
    # change the value in the Atom object 
    atom.atomid += insert_index 
    
  # renumber every other section in psf2, renumbering where appropriate
  renumber_psflist(psf2.bondlist, psf2_new)
  renumber_psflist(psf2.anglelist, psf2_new)
  renumber_psflist(psf2.dihedrallist, psf2_new)
  renumber_psflist(psf2.improperlist, psf2_new)
  #renumber_psflist(psf2.nblist, psf2_new)
  renumber_psflist(psf2.donorlist, psf2_new)
  renumber_psflist(psf2.acclist, psf2_new)
  renumber_psflist(psf2.ctrlist, psf2_new)    
    
  # run through remainder of psf1 atoms, 
  # generate dictionary of new atom ids
  psf1_new = {0:0}
  for atom in psf1.atomlist:
    if atom.atomid <= insert_index:
      # add to the dictionary
      psf1_new[atom.atomid] = atom.atomid 
    else:
      # add to the dictionary
      psf1_new[atom.atomid] = atom.atomid + num_psf2_atoms 
      # change the value in the Atom object
      atom.atomid += num_psf2_atoms 
  # renumber every other section in psf1
  renumber_psflist(psf1.bondlist, psf1_new)
  renumber_psflist(psf1.anglelist, psf1_new)
  renumber_psflist(psf1.dihedrallist, psf1_new)
  renumber_psflist(psf1.improperlist, psf1_new)
  #renumber_psflist(psf1.nblist, psf1_new)
  renumber_psflist(psf1.donorlist, psf1_new)
  renumber_psflist(psf1.acclist, psf1_new)
  
  renumber_psflist(psf1.ctrlist, psf1_new)    
  
  # now merge the files from the two
  newatomlist = psf1.atomlist[
      :insert_index] + psf2.atomlist + psf1.atomlist[insert_index:]
  newbondlist = psf1.bondlist + psf2.bondlist
  newanglelist = psf1.anglelist + psf2.anglelist
  newdihedrallist = psf1.dihedrallist + psf2.dihedrallist
  newimproperlist = psf1.improperlist + psf2.improperlist
  newnblist = psf1.nblist + psf2.nblist
  newdonorlist = psf1.donorlist + psf2.donorlist
  newacclist = psf1.acclist + psf2.acclist
  newctrlist = psf1.ctrlist + psf2.ctrlist
  
  newpsf = PSF(newatomlist, newbondlist, newanglelist, newdihedrallist, 
               newimproperlist, newnblist, newdonorlist, newacclist, 
               newctrlist)
  return newpsf

def parse_psf(psf_file):
  """
  takes a file-like object as an argument and parses the psf file
  """
  # a series of empty lists
  atomlist = []; bondlist = []; anglelist = []; dihedrallist = []; 
  improperlist = []; nblist = []; crtlist = []; donorlist = []; 
  acclist = [] 
  # the section of PSF file we are in
  section = "" 
  bangN = re.compile("!N([A-Z]*)")
  for line in psf_file.xreadlines():
    sectionsearch = re.search(bangN, line)
    # then we are entering a new section
    if sectionsearch: 
      section = sectionsearch.group(1)
      print "now parsing section:", section
      continue
    else:
      if section == "TITLE":
        continue # ignore this section
      elif section == "ATOM":
        # skip if its an empty or too-short line
        if len(line) < 50: continue
        atomlist.append(Atom(line))
        #print atomlist[-1].write()
      elif section == "BOND":
        tempbondlist = map(int, line.strip().split())
        for i in range(0, len(tempbondlist), 2):
          bondlist.append(tempbondlist[i:i+2])
      elif section == "THETA":
        tempanglelist = map(int, line.strip().split())
        for i in range(0, len(tempanglelist), 3):
          anglelist.append(tempanglelist[i:i+3])
      elif section == "PHI":
        tempdihedrallist = map(int, line.strip().split())
        for i in range(0, len(tempdihedrallist), 4):
          dihedrallist.append(tempdihedrallist[i:i+4])
      elif section == "IMPHI":
        tempimproperlist = map(int, line.strip().split())
        for i in range(0, len(tempimproperlist), 4):
          improperlist.append(tempimproperlist[i:i+4])
      elif section == "NCRTERM":
        tempncrtermlist = map(int, line.strip().split())
        for i in range(0, len(tempncrtermlist), 4):
          crtlist.append(tempncrtermlist[i:i+4])
      elif section == "DON": # donor list
        tempdonlist = map(int, line.strip().split())
        for i in range(0, len(tempdonlist), 2):
          donorlist.append(tempdonlist[i:i+2])
      elif section == "ACC": # acceptor list
        tempacclist = map(int, line.strip().split())
        for i in range(0, len(tempacclist), 2):
          acclist.append(tempacclist[i:i+2])
          #acclist += [map(int, line.strip().split())]
      elif section == "NB":
        tempnblist = map(int, line.strip().split())
        for i in range(0, len(tempnblist), 2):
          nblist.append(tempnblist[i:i+2])
      elif section == "GRP":
        continue
      else:
        print "Warning: psfmerge.py does not know how to deal with section:", \
            section, ". Therefore it will be ignored..."
  
  #print "improperlist[:40]:", improperlist[:40]
  return PSF(atomlist, bondlist, anglelist, dihedrallist, improperlist, nblist,
             donorlist, acclist, crtlist)
  

if __name__ == "__main__":
  psf_filename1 = sys.argv[1]
  psf_filename2 = sys.argv[2]
  
  newpsf = merge_psf_files(psf_filename1, psf_filename2, insert_index = -1)
  newpsf.write("holo_wet.psf")
  
